#!/user/bin/env/node
var path = require('path');
var webpack = require('webpack');
var WebPackDevServer = require('webpack-dev-server');
var nodemon = require('nodemon');

/******************************************************
 * Webpack Dev Server
 *
 * @desc The webpack dev server is in charge of automatically rebuilding
 * javascript code and hot-reloading the frontend application without loosing
 * the current state. Less changes will also be automatically compiled to css
 * and updated without reloads on the frontend application.
 */

var config = require('../webpack/dev.config');
var compiler = webpack(config);

var WebPackDevServerConf = {
  hot: config.devServer.hot,
  port: config.devServer.port,
  host: config.devServer.host,
  contentBase: config.devServer.contentBase,
  publicPath: config.devServer.publicPath,
  inline: config.devServer.inline,
  quiet: false,
  noInfo: false,
  stats: {
    assets: false,
    colors: true,
    version: false,
    hash: false,
    timings: false,
    chunks: false,
    chunkModules: false
  },
  headers: config.devServer.headers
};

// Create the webpack dev server by wrapping the compiler and the server config
var devServer = new WebPackDevServer(compiler, WebPackDevServerConf);

// The webpack dev server stays running to serve and dynamically reload files
// on our frontend application.
devServer.listen(config.devServer.port, config.devServer.host, function(err) {
  if (err) return console.error(err);
});

/******************************************************
 * Nodemon Server
 *
 * @desc The nodemon server is in charge of restarting the server side
 * application when a change is made on it. This will allow for any new routes,
 * api methods, and modules to become available. This wont reload the frontend
 * side of the application.
 */

// Starts the nodemon long running process.
nodemon({
  script: path.join(__dirname, '../bin/start'),
  ext: 'js',
  ignore: [
    'node_modules/*',
    'client/actions/*',
    'client/client.js',
    'tasks/*',
    'webpack/*'
  ]
});

// Report to console if we have to restart the application with the files
// that triggered the restart.
nodemon.on('restart', function(files) {
  console.log('nodemon: App restarted due to:', files);
});

// We must let nodemon quit before we can fully exit the process. Not doing this
// will cause the process to stay hanging until we forcefully kill it which will
// throw an error.
process.once('SIGINT', function() {
  nodemon.once('exit', function() {
    process.exit();
  });
});
